package com.dalogin.utils;
/**
 * @author George Gaspar
 * @email: igeorge1982@gmail.com
 * @Year: 2015
 */

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;

import javax.crypto.*;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
// TODO: Implement 256-bit version like: http://securejava.wordpress.com/2012/10/25/aes-256/

/**
 * A class for AES encryption and decryption.
 */
public class AesUtil {
    /**
     *
     */
    private final int keySize;
    private final int iterationCount;
    private final Cipher cipher;

    /**
     *
     * @param keySize
     * @param iterationCount
     */
    public AesUtil(int keySize, int iterationCount) {
        this.keySize = keySize;
        this.iterationCount = iterationCount;
        try {
            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
            throw fail(e);
        }
    }

    /**
     *
     * @param length
     * @return
     */
    public static String random(int length) {
        byte[] salt = new byte[length];
        new SecureRandom().nextBytes(salt);
        return hex(salt);
    }

    /**
     *
     * @param bytes
     * @return
     */
    public static String base64(byte[] bytes) {
        return Base64.encodeBase64String(bytes);
    }

    /**
     *
     * @param str
     * @return
     */
    public static byte[] base64(String str) {
        return Base64.decodeBase64(str);
    }

    /**
     *
     * @param bytes
     * @return
     */
    public static String hex(byte[] bytes) {
        return Hex.encodeHexString(bytes);
    }

    /**
     *
     * @param str
     * @return
     */
    public static byte[] hex(String str) {
        try {
            return Hex.decodeHex(str.toCharArray());
        } catch (DecoderException e) {
            throw new IllegalStateException(e);
        }
    }

    /**
     * Encrypt a plain text with pass phrase. The secret key for the encryption is generated by the salt string and the pass phrase,
     * and the final encryption will be done according to the initialization vector. An initialization vector (IV) or
     * starting variable (SV)[1] is a fixed-size input to a cryptographic primitive that is typically required to be random
     * or pseudorandom. Randomization is crucial for encryption schemes to achieve semantic security, a property
     * whereby repeated usage of the scheme under the same key does not allow an attacker to infer relationships
     * between segments of the encrypted message.
     *
     * @param salt
     * @param iv
     * @param passphrase
     * @param plaintext
     * @return text
     */
    public String encrypt(String salt, String iv, String passphrase, String plaintext) {
        try {
            SecretKey key = generateKey(salt, passphrase);
            byte[] encrypted = doFinal(Cipher.ENCRYPT_MODE, key, iv, plaintext.getBytes("UTF-8"));
            return base64(encrypted);
        } catch (UnsupportedEncodingException e) {
            throw fail(e);
        }
    }

    /**
     *
     * @param salt
     * @param iv
     * @param passphrase
     * @param ciphertext
     * @return
     */
    public String decrypt(String salt, String iv, String passphrase, String ciphertext) {
        try {
            SecretKey key = generateKey(salt, passphrase);
            byte[] decrypted = doFinal(Cipher.DECRYPT_MODE, key, iv, base64(ciphertext));
            return new String(decrypted, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            throw fail(e);
        }
    }

    /**
     *
     * @param encryptMode
     * @param key
     * @param iv
     * @param bytes
     * @return
     */
    private byte[] doFinal(int encryptMode, SecretKey key, String iv, byte[] bytes) {
        try {
            cipher.init(encryptMode, key, new IvParameterSpec(hex(iv)));
            return cipher.doFinal(bytes);
        } catch (InvalidKeyException
                 | InvalidAlgorithmParameterException
                 | IllegalBlockSizeException
                 | BadPaddingException e) {
            throw fail(e);
        }
    }

    /**
     *
     * @param salt
     * @param passphrase
     * @return
     */
    private SecretKey generateKey(String salt, String passphrase) {
        try {
            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
            KeySpec spec = new PBEKeySpec(passphrase.toCharArray(), hex(salt), iterationCount, keySize);
            SecretKey key = new SecretKeySpec(factory.generateSecret(spec).getEncoded(), "AES");
            return key;
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            throw fail(e);
        }
    }

    /**
     *
     * @param e
     * @return
     */
    private IllegalStateException fail(Exception e) {
        return new IllegalStateException(e);
    }
}
